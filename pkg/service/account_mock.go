// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/account.go

// Package service is a generated GoMock package.
package service

import (
	entity "ms/card/pkg/persistence/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockAccounts is a mock of Accounts interface.
type MockAccounts struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsMockRecorder
}

// MockAccountsMockRecorder is the mock recorder for MockAccounts.
type MockAccountsMockRecorder struct {
	mock *MockAccounts
}

// NewMockAccounts creates a new mock instance.
func NewMockAccounts(ctrl *gomock.Controller) *MockAccounts {
	mock := &MockAccounts{ctrl: ctrl}
	mock.recorder = &MockAccountsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccounts) EXPECT() *MockAccountsMockRecorder {
	return m.recorder
}

// UpdateLimit mocks base method.
func (m *MockAccounts) UpdateLimit(ctx context.Context, account *entity.Account, amount int64, negative bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLimit", ctx, account, amount, negative)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLimit indicates an expected call of UpdateLimit.
func (mr *MockAccountsMockRecorder) UpdateLimit(ctx, account, amount, negative interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLimit", reflect.TypeOf((*MockAccounts)(nil).UpdateLimit), ctx, account, amount, negative)
}
